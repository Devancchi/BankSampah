/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import component.ExcelExporter;
import component.LoggerUtil;
import component.NumberOnlyFilter;
import component.UserSession;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import main.DBconnect;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import java.text.NumberFormat;
import java.util.Locale;
import java.math.BigDecimal;
import notification.toast.Notifications;

/**
 *
 * @author devan
 */
public class TabManajemenNasabah extends javax.swing.JPanel {

    private final Connection conn;
    private int halamanSaatIni = 1;
    private int dataPerHalaman = 20;
    private int totalPages;
    private final UserSession users;

    public TabManajemenNasabah(UserSession user) {
        this.users = user;
        initComponents();
        conn = DBconnect.getConnection();
        setTabelModel();
        loadData();
        paginationNasabah();
        ((AbstractDocument) txt_telepon.getDocument()).setDocumentFilter(new NumberOnlyFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        panelTabel = new component.ShadowPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_data = new component.Table();
        lb_dataNasabah = new javax.swing.JLabel();
        panelBawah = new component.ShadowPanel();
        lb_halaman = new javax.swing.JLabel();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        btn_first = new javax.swing.JButton();
        btn_Export = new component.Jbutton();
        btn_import = new component.Jbutton();
        panelAction = new component.ShadowPanel();
        txt_search = new component.PlaceholderTextField();
        btn_add = new component.Jbutton();
        btn_delete = new component.Jbutton();
        btn_cancel = new component.Jbutton();
        panelAdd = new javax.swing.JPanel();
        panelForm = new component.ShadowPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btn_save = new component.Jbutton();
        btn_back = new component.Jbutton();
        txt_nama = new component.PlaceholderTextField();
        txt_alamat = new component.PlaceholderTextField();
        txt_telepon = new component.PlaceholderTextField();
        txt_email = new component.PlaceholderTextField();
        txt_id = new component.PlaceholderTextField();

        setPreferredSize(new java.awt.Dimension(1200, 716));
        setLayout(new java.awt.CardLayout());

        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(250, 250, 250));

        tbl_data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_data.setSelectionBackground(new java.awt.Color(255, 255, 0));
        tbl_data.setSelectionForeground(new java.awt.Color(255, 255, 0));
        tbl_data.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_dataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_data);

        lb_dataNasabah.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        lb_dataNasabah.setText("Data Nasabah");

        lb_halaman.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_halaman.setText("hal");

        btn_before.setText("<");

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "40", "60", "80", "100" }));

        btn_next.setText(">");

        btn_last.setText("Last Page");

        btn_first.setText("First Page");

        btn_Export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_excel.png"))); // NOI18N
        btn_Export.setText("Export To Excel");
        btn_Export.setFillClick(new java.awt.Color(55, 130, 60));
        btn_Export.setFillOriginal(new java.awt.Color(76, 175, 80));
        btn_Export.setFillOver(new java.awt.Color(69, 160, 75));
        btn_Export.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Export.setRoundedCorner(40);
        btn_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExportActionPerformed(evt);
            }
        });

        btn_import.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_excel.png"))); // NOI18N
        btn_import.setText("Import To Excel");
        btn_import.setFillClick(new java.awt.Color(60, 130, 200));
        btn_import.setFillOriginal(new java.awt.Color(80, 150, 230));
        btn_import.setFillOver(new java.awt.Color(70, 140, 220));
        btn_import.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_import.setRoundedCorner(40);
        btn_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBawahLayout = new javax.swing.GroupLayout(panelBawah);
        panelBawah.setLayout(panelBawahLayout);
        panelBawahLayout.setHorizontalGroup(
            panelBawahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBawahLayout.createSequentialGroup()
                .addComponent(btn_Export, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_import, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_first, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_last, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        panelBawahLayout.setVerticalGroup(
            panelBawahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBawahLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBawahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Export, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_first, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_last, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_import, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelTabelLayout = new javax.swing.GroupLayout(panelTabel);
        panelTabel.setLayout(panelTabelLayout);
        panelTabelLayout.setHorizontalGroup(
            panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(panelBawah, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lb_dataNasabah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelTabelLayout.setVerticalGroup(
            panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTabelLayout.createSequentialGroup()
                .addComponent(lb_dataNasabah, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBawah, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txt_search.setPlaceholder("Cari Nasabah");
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchKeyTyped(evt);
            }
        });

        btn_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_tambah.png"))); // NOI18N
        btn_add.setText("Tambah");
        btn_add.setFillClick(new java.awt.Color(55, 130, 60));
        btn_add.setFillOriginal(new java.awt.Color(76, 175, 80));
        btn_add.setFillOver(new java.awt.Color(69, 160, 75));
        btn_add.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_hapus.png"))); // NOI18N
        btn_delete.setText("Hapus");
        btn_delete.setFillClick(new java.awt.Color(190, 30, 20));
        btn_delete.setFillOriginal(new java.awt.Color(231, 76, 60));
        btn_delete.setFillOver(new java.awt.Color(210, 50, 40));
        btn_delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_deleteMouseClicked(evt);
            }
        });
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_batal.png"))); // NOI18N
        btn_cancel.setText("Batal");
        btn_cancel.setFillClick(new java.awt.Color(200, 125, 0));
        btn_cancel.setFillOriginal(new java.awt.Color(243, 156, 18));
        btn_cancel.setFillOver(new java.awt.Color(230, 145, 10));
        btn_cancel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelActionLayout = new javax.swing.GroupLayout(panelAction);
        panelAction.setLayout(panelActionLayout);
        panelActionLayout.setHorizontalGroup(
            panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelActionLayout.setVerticalGroup(
            panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActionLayout.createSequentialGroup()
                .addGroup(panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelActionLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelActionLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelAction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(panelAction, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelTabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        panelMain.add(panelView, "card2");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel6.setText("Data Nasabah");

        jLabel11.setFont(new java.awt.Font("Mongolian Baiti", 1, 21)); // NOI18N
        jLabel11.setText("ID");

        jLabel12.setFont(new java.awt.Font("Mongolian Baiti", 1, 22)); // NOI18N
        jLabel12.setText("Nama");

        jLabel7.setFont(new java.awt.Font("Mongolian Baiti", 1, 21)); // NOI18N
        jLabel7.setText("Email");

        jLabel8.setFont(new java.awt.Font("Mongolian Baiti", 1, 21)); // NOI18N
        jLabel8.setText("Telepon");

        jLabel13.setFont(new java.awt.Font("Mongolian Baiti", 1, 22)); // NOI18N
        jLabel13.setText("Alamat");

        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_simpan.png"))); // NOI18N
        btn_save.setText("Simpan");
        btn_save.setFillClick(new java.awt.Color(30, 100, 150));
        btn_save.setFillOriginal(new java.awt.Color(41, 128, 185));
        btn_save.setFillOver(new java.awt.Color(36, 116, 170));
        btn_save.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_batal.png"))); // NOI18N
        btn_back.setText("Batal");
        btn_back.setFillClick(new java.awt.Color(200, 125, 0));
        btn_back.setFillOriginal(new java.awt.Color(243, 156, 18));
        btn_back.setFillOver(new java.awt.Color(230, 145, 10));
        btn_back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        txt_nama.setPlaceholder("Nama");

        txt_alamat.setPlaceholder("Alamat");

        txt_telepon.setPlaceholder("Telepon");

        txt_email.setPlaceholder("Email");

        txt_id.setPlaceholder("ID");

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel13)
                    .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelFormLayout.createSequentialGroup()
                            .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12)
                                .addComponent(jLabel11))
                            .addGap(1072, 1072, 1072))
                        .addComponent(txt_nama, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_telepon, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_alamat, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFormLayout.createSequentialGroup()
                    .addGap(970, 970, 970)
                    .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_nama, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_alamat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_telepon, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(478, Short.MAX_VALUE))
            .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFormLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_back, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(855, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();

//        txt_id.setText(setIDAnggota());
        if (btn_add.getText().equals("Ubah")) {
            dataTabel();
            btn_save.setText("Perbarui");
        }
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                txt_id.requestFocusInWindow();
            }
        });

        txt_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    txt_nama.requestFocus();
                }
            }
        });

        txt_nama.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    txt_alamat.requestFocus();
                }
            }
        });

        txt_alamat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    txt_telepon.requestFocus();
                }
            }
        });

        txt_telepon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    txt_email.requestFocus();
                }
            }
        });

        txt_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    btn_save.requestFocus();
                }
            }
        });
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        if (btn_save.getText().equals("Tambah")) {
            btn_save.setText("Simpan");
        } else if (btn_save.getText().equals("Simpan")) {
            insertData();
        } else if (btn_save.getText().equals("Perbarui")) {
            updateData();
        }
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        panelMain.removeAll();
        panelMain.add(panelView);
        panelMain.repaint();
        panelMain.revalidate();
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        showPanel();
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void tbl_dataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_dataMouseClicked
        if (btn_add.getText().equals("Tambah")) {
            btn_add.setText("Ubah");
            btn_add.setIcon(new ImageIcon("src\\main\\resources\\icon\\icon_edit.png"));
            btn_add.setFillClick(new Color(30, 100, 150));
            btn_add.setFillOriginal(new Color(41, 128, 185));
            btn_add.setFillOver(new Color(36, 116, 170));
            btn_delete.setVisible(true);
            btn_cancel.setVisible(true);
        }
    }//GEN-LAST:event_tbl_dataMouseClicked
    private void btn_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_deleteMouseClicked
        deleteData();
    }//GEN-LAST:event_btn_deleteMouseClicked

    private void txt_searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyTyped
        searchData();
    }//GEN-LAST:event_txt_searchKeyTyped

    private void btn_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExportActionPerformed
        try {
            // Siapkan model dan ambil data nasabah
            DefaultTableModel model = new DefaultTableModel(
                    new String[]{"ID", "Nama", "Alamat", "Telepon", "Email", "Saldo"}, 0
            );
            getAllNasabahData(model); // Ambil data dari DB ke model

            // Cek jika tidak ada data
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Tidak ada data untuk diekspor!", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Pilih lokasi penyimpanan file
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Simpan file Excel");
            chooser.setSelectedFile(new File("data_nasabah.xls")); // Nama default

            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".xls") || f.getName().toLowerCase().endsWith(".xlsx");
                }

                @Override
                public String getDescription() {
                    return "Excel Files (*.xls, *.xlsx)";
                }
            });

            int option = chooser.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                File fileToSave = chooser.getSelectedFile();

                // Tambahkan ekstensi jika tidak ada
                String fileName = fileToSave.getName().toLowerCase();
                if (!fileName.endsWith(".xls") && !fileName.endsWith(".xlsx")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".xls");
                }

                // Konfirmasi jika file sudah ada
                if (fileToSave.exists()) {
                    int confirm = JOptionPane.showConfirmDialog(
                            this,
                            "File sudah ada. Apakah Anda ingin menimpanya?",
                            "Konfirmasi",
                            JOptionPane.YES_NO_OPTION
                    );
                    if (confirm != JOptionPane.YES_OPTION) {
                        return;
                    }
                }

                // Ekspor data ke Excel
                try {
                    ExcelExporter.exportTableModelToExcel(model, fileToSave);

                    JOptionPane.showMessageDialog(this,
                            "Export berhasil!\nFile disimpan di: " + fileToSave.getAbsolutePath(),
                            "Sukses",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this,
                            "Gagal mengekspor file: " + e.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Terjadi kesalahan: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_ExportActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        notification.toast.Notifications.getInstance().show(Notifications.Type.SUCCESS, "Berhasil Menghapus Nasabah.");
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_importActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private component.Jbutton btn_Export;
    private component.Jbutton btn_add;
    private component.Jbutton btn_back;
    private javax.swing.JButton btn_before;
    private component.Jbutton btn_cancel;
    private component.Jbutton btn_delete;
    private javax.swing.JButton btn_first;
    private component.Jbutton btn_import;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private component.Jbutton btn_save;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_dataNasabah;
    private javax.swing.JLabel lb_halaman;
    private component.ShadowPanel panelAction;
    private javax.swing.JPanel panelAdd;
    private component.ShadowPanel panelBawah;
    private component.ShadowPanel panelForm;
    private javax.swing.JPanel panelMain;
    private component.ShadowPanel panelTabel;
    private javax.swing.JPanel panelView;
    private component.Table tbl_data;
    private component.PlaceholderTextField txt_alamat;
    private component.PlaceholderTextField txt_email;
    private component.PlaceholderTextField txt_id;
    private component.PlaceholderTextField txt_nama;
    private component.PlaceholderTextField txt_search;
    private component.PlaceholderTextField txt_telepon;
    // End of variables declaration//GEN-END:variables

    ////////////////////////////////////buat setup awal/////////////////////////////////
private void paginationNasabah() {
        btn_first.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = 1;
                loadData();
            }
        });
        btn_before.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni > 1) {
                    halamanSaatIni--;
                    loadData();
                }
            }
        });
        cbx_data.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dataPerHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());
                halamanSaatIni = 1;
                loadData();
            }
        });
        btn_next.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (halamanSaatIni < totalPages) {
                    halamanSaatIni++;
                    loadData();
                }

            }
        });
        btn_last.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = totalPages;
                loadData();
            }
        });
    }

    private void calculateTotalPage() {
        int totalData = getTotalData();
        totalPages = (int) Math.ceil((double) totalData / dataPerHalaman);

    }

    private void showPanel() {
        panelMain.removeAll();
        panelMain.add(new TabManajemenNasabah(users));
        panelMain.repaint();
        panelMain.revalidate();
    }

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
        model.addColumn("ID");
        model.addColumn("Nama");
        model.addColumn("Alamat");
        model.addColumn("Telepon");
        model.addColumn("Email");
        model.addColumn("Saldo");
    }

    /////////////////////////////////buat setup awal/////////////////////////////////

    /////////////////////////////////buat ambil dan show data/////////////////////////////////
    
    private int getTotalData() {
        int totalData = 0;
        try {
            String sql = "Select Count(*) AS total FROM manajemen_nasabah";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    totalData = rs.getInt("total");
                }
            }

        } catch (Exception e) {
            Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }
        return totalData;
    }

    private void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0);
//        System.out.println("start index : "+startIndex);
//        System.out.println("entries page : "+entriesPage);
//        System.out.println("mode table : " +model);
        try {
            String sql = "SELECT * FROM manajemen_nasabah ORDER BY id_nasabah DESC LIMIT ?,?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setInt(1, startIndex);
                st.setInt(2, entriesPage);
                ResultSet rs = st.executeQuery();

                // Format angka sesuai locale Indonesia
                NumberFormat formatRupiah = NumberFormat.getInstance(new Locale("id", "ID"));

                while (rs.next()) {
                    String idNasabah = rs.getString("id_nasabah");
                    String namaNasabah = rs.getString("nama_nasabah");
                    String alamat = rs.getString("alamat");
                    String telepon = rs.getString("no_telpon");
                    String email = rs.getString("email");
                    BigDecimal saldo = rs.getBigDecimal("saldo_total");

                    // Format saldo menjadi string dengan titik ribuan
                    String saldoFormatted = "Rp " + formatRupiah.format(saldo);

                    Object[] rowData = {idNasabah, namaNasabah, alamat, telepon, email, saldoFormatted};
                    model.addRow(rowData);
                }
                System.out.println("Mengambil data dari index: " + startIndex + ", sebanyak: " + entriesPage);
                System.out.println("Jumlah baris dalam model setelah load: " + model.getRowCount());
            }
        } catch (SQLException e) {
            Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void loadData() {
        calculateTotalPage();
        int totalData = getTotalData();
        lb_halaman.setText(String.valueOf("Page " + halamanSaatIni + " Dari Total " + totalData + " Data"));
        int startIndex = (halamanSaatIni - 1) * dataPerHalaman;
        getData(startIndex, dataPerHalaman, (DefaultTableModel) tbl_data.getModel());
        btn_delete.setVisible(false);
        btn_cancel.setVisible(false);
        resetPagination();
    }

    private void dataTabel() {
        panelView.setVisible(false);
        panelAdd.setVisible(true);

        int row = tbl_data.getSelectedRow();

//        txt_id.setEnabled(false);
        txt_id.setText(tbl_data.getValueAt(row, 0).toString());
        txt_nama.setText(tbl_data.getValueAt(row, 1).toString());
        txt_alamat.setText(tbl_data.getValueAt(row, 2).toString());
        txt_telepon.setText(tbl_data.getValueAt(row, 3).toString());
        txt_email.setText(tbl_data.getValueAt(row, 4).toString());
    }

    private void searchData() {
        String kataKunci = txt_search.getText();
        DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
        model.setRowCount(0);

        try {
            String sql = "SELECT * FROM manajemen_nasabah WHERE id_nasabah LIKE ? OR nama_nasabah LIKE ? OR email LIKE ? OR no_telpon LIKE ?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, "%" + kataKunci + "%");
                st.setString(2, "%" + kataKunci + "%");
                st.setString(3, "%" + kataKunci + "%");
                st.setString(4, "%" + kataKunci + "%");
                ResultSet rs = st.executeQuery();
                NumberFormat formatRupiah = NumberFormat.getInstance(new Locale("id", "ID"));

                while (rs.next()) {
                    String idNasabah = rs.getString("id_nasabah");
                    String namaNasabah = rs.getString("nama_nasabah");
                    String alamat = rs.getString("alamat");
                    String telepon = rs.getString("no_telpon");
                    String email = rs.getString("email");
                    BigDecimal saldo = rs.getBigDecimal("saldo_total");

                    String saldoFormatted = "Rp " + formatRupiah.format(saldo);

                    Object[] rowData = {idNasabah, namaNasabah, alamat, telepon, email, saldoFormatted};
                    model.addRow(rowData);
                }
            }
            tbl_data.clearSelection();
            resetPagination();
            resetForm();
        } catch (SQLException e) {
            Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    /////////////////////////////////buat ambil dan show data/////////////////////////////////

        /////////////////////////////////buat manip data/////////////////////////////////
    private void insertData() {
        String idNasabah = txt_id.getText();
        String namaNasabah = txt_nama.getText();
        String alamat = txt_alamat.getText();
        String telepon = txt_telepon.getText();
        String email = txt_email.getText();

        if (idNasabah.isEmpty() || namaNasabah.isEmpty() || alamat.isEmpty() || telepon.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (isDuplicate(telepon, email)) {
            JOptionPane.showMessageDialog(null, "Telepon atau Email sudah digunakan!");
            return;
        }

        try {
            String sql = "INSERT INTO manajemen_nasabah (id_nasabah, nama_nasabah, alamat, no_telpon, email) VALUES (?,?,?,?,?)";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, idNasabah);
                st.setString(2, namaNasabah);
                st.setString(3, alamat);
                st.setString(4, telepon);
                st.setString(5, email);

                int rowInserted = st.executeUpdate();
                if (rowInserted > 0) {
                    JOptionPane.showMessageDialog(this, "data berhasil ditambahkan");
                    LoggerUtil.insert(users.getId(), "Menambah data nasabah ID: " + idNasabah);
                    resetForm();
                    loadData();
                    showPanel();
                }
            }
        } catch (SQLException e) {
            // Cek jika error karena duplicate key
            if (e.getSQLState().equals("23000")) { // SQLState 23000 = Integrity Constraint Violation
                JOptionPane.showMessageDialog(this, "ID Nasabah sudah digunakan!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }

    private void updateData() {
        String idNasabah = txt_id.getText();
        String namaNasabah = txt_nama.getText();
        String alamat = txt_email.getText();
        String telepon = txt_telepon.getText();
        String email = txt_email.getText();

        if (idNasabah.isEmpty() || namaNasabah.isEmpty() || alamat.isEmpty() || telepon.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String sql = "UPDATE manajemen_nasabah SET nama_nasabah=?, alamat=?, no_telpon=?, email=? WHERE id_nasabah=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {

                st.setString(1, namaNasabah);
                st.setString(2, alamat);
                st.setString(3, telepon);
                st.setString(4, email);
                st.setString(5, idNasabah);

                int rowUpdated = st.executeUpdate();
                if (rowUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "data berhasil diupdate");
                    LoggerUtil.insert(users.getId(), "Mengupdate data nasabah ID: " + idNasabah);
                    resetForm();
                    loadData();
                    showPanel();
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void deleteData() {
        int selectedRow = tbl_data.getSelectedRow();
        int confirm = JOptionPane.showConfirmDialog(this,
                "Yakin ingin menghapus Data ini??",
                "Konfirmasi Hapus Data",
                JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String id = tbl_data.getValueAt(selectedRow, 0).toString();
            try {
                String sql = "DELETE FROM manajemen_nasabah where id_nasabah=?";
                try (PreparedStatement st = conn.prepareStatement(sql)) {
                    st.setString(1, id);
                    int rowDeleted = st.executeUpdate();
                    if (rowDeleted > 0) {
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                        LoggerUtil.insert(users.getId(), "Menghapus data nasabah dengan ID: " + id);
                        resetForm();
                        loadData();
                        showPanel();
                    } else {
                        JOptionPane.showMessageDialog(this, "Data Gagal Dihapus");
                    }
                }
            } catch (SQLException e) {
                Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
            }

        }
    }

    private void getAllNasabahData(DefaultTableModel model) {
        model.setRowCount(0);

        try {
            String sql = "SELECT * FROM manajemen_nasabah ORDER BY id_nasabah DESC";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String id = rs.getString("id_nasabah");
                    String nama = rs.getString("nama_nasabah");
                    String alamat = rs.getString("alamat");
                    String telepon = rs.getString("no_telpon");
                    String email = rs.getString("email");
                    BigDecimal saldo = rs.getBigDecimal("saldo_total");

                    Object[] rowData = {id, nama, alamat, telepon, email, saldo};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal ambil data nasabah:\n" + e.getMessage());
        }
    }

    /////////////////////////////////buat manip data/////////////////////////////////

    
    /////////////////////////////////buat utility/////////////////////////////////
private String setIDAnggota() {
        String urutan = "NSB001";
        String sql = "SELECT MAX(CAST(SUBSTRING(id_nasabah, 4) AS UNSIGNED)) AS Nomor FROM manajemen_nasabah";

        try (PreparedStatement st = conn.prepareStatement(sql)) {
            ResultSet rs = st.executeQuery();
            if (rs.next() && rs.getString("Nomor") != null) {
                int nomor = rs.getInt("Nomor") + 1;
                urutan = String.format("NSB%03d", nomor);
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }

        return urutan;
    }

    private void resetForm() {
        txt_nama.setText("");
        txt_alamat.setText("");
        txt_telepon.setText("");
        txt_email.setText("");
    }

    public void importExcelToDatabase(File excelFile) {
        try (FileInputStream fis = new FileInputStream(excelFile)) {

            Workbook workbook;
            if (excelFile.getName().endsWith(".xlsx")) {
                workbook = new XSSFWorkbook(fis);
            } else if (excelFile.getName().endsWith(".xls")) {
                workbook = new HSSFWorkbook(fis);
            } else {
                throw new IllegalArgumentException("File bukan .xls atau .xlsx");
            }

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            if (rowIterator.hasNext()) {
                rowIterator.next();
            }

            String insertSql = "INSERT INTO manajemen_nasabah (id_nasabah, nama_nasabah, alamat, no_telpon, email, saldo) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement insertPs = conn.prepareStatement(insertSql);

            String checkSql = "SELECT COUNT(*) FROM manajemen_nasabah WHERE no_telpon = ? OR email = ?";
            PreparedStatement checkPs = conn.prepareStatement(checkSql);

            int successCount = 0;
            int skippedCount = 0;

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                String id = row.getCell(0).toString();
                String nama = row.getCell(1).getStringCellValue();
                String alamat = row.getCell(2).getStringCellValue();
                String telepon = row.getCell(3).toString();
                String email = row.getCell(4).getStringCellValue();
                String saldo = row.getCell(5).getStringCellValue();

                checkPs.setString(1, telepon);
                checkPs.setString(2, email);
                ResultSet rs = checkPs.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0) {
                    insertPs.setString(1, id);
                    insertPs.setString(2, nama);
                    insertPs.setString(3, alamat);
                    insertPs.setString(4, telepon);
                    insertPs.setString(5, email);
                    insertPs.setString(6, saldo);
                    insertPs.addBatch();
                    successCount++;
                } else {
                    skippedCount++;
                }
            }

            insertPs.executeBatch();
            loadData();
            LoggerUtil.insert(users.getId(), "Import data nasabah");
            JOptionPane.showMessageDialog(null, "Import selesai!\nBerhasil: " + successCount + "\nDuplikat dilewati: " + skippedCount);

        } catch (IOException | SQLException | IllegalArgumentException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Import gagal: " + e.getMessage());
        }
    }

    private void resetPagination() {
        btn_add.setText("Tambah");
        btn_add.setIcon(new ImageIcon("src\\main\\resources\\icon\\icon_tambah.png"));
        btn_add.setFillClick(new Color(46, 204, 113));
        btn_add.setFillOriginal(new Color(39, 174, 96));
        btn_add.setFillOver(new Color(33, 150, 83));
        btn_delete.setVisible(false);
        btn_cancel.setVisible(false);
    }

    private boolean isDuplicate(String telepon, String email) {
        String sql = "SELECT COUNT(*) FROM manajemen_nasabah WHERE no_telpon = ? OR email = ?";

        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, telepon);
            ps.setString(2, email);

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                return count > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }


/////////////////////////////////buat utility/////////////////////////////////
}
