/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import component.ExcelExporter;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import main.DBconnect;
import chart.ModelPolarAreaChart;
import chart.PolarAreaChart;
import notification.toast.Notifications;

/**
 *
 * @author devan
 */
public class TabDashboard extends javax.swing.JPanel {

    private final Connection conn;
    private int halamanSaatIni = 1;
    private int dataPerHalaman = 15;
    private int totalPages;

    public TabDashboard() {
        conn = DBconnect.getConnection();
        initComponents();
        loadDashboardData();
        setTabelModel();
        loadLogData();
        paginationLog();
        loadDataChartBarang();
        loadDataChartJenisSampah();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCard = new component.ShadowPanel();
        CardTotalNasabah = new component.Card();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lb_totalNasabah = new javax.swing.JLabel();
        CardTotalSampah = new component.Card();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lb_totalSampah = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        CardSaldoTabungan = new component.Card();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lb_laba = new javax.swing.JLabel();
        panelTabel = new component.ShadowPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_log = new component.Table();
        jLabel14 = new javax.swing.JLabel();
        ChartBarangTerjualVsBarangSisa = new chart.PolarAreaChart();
        ChartDistribusiSampah = new chart.PolarAreaChart();
        panelBawah = new component.ShadowPanel();
        btn_add = new component.Jbutton();
        lb_halaman = new javax.swing.JLabel();
        btn_firstLog = new javax.swing.JButton();
        btn_beforeLog = new javax.swing.JButton();
        cbx_dataLog = new javax.swing.JComboBox<>();
        btn_nextLog = new javax.swing.JButton();
        btn_lastLog = new javax.swing.JButton();

        setBackground(new java.awt.Color(250, 250, 250));
        setPreferredSize(new java.awt.Dimension(1192, 944));

        panelCard.setPreferredSize(new java.awt.Dimension(1182, 126));

        CardTotalNasabah.setFillColor(new java.awt.Color(31, 179, 148));
        CardTotalNasabah.setPreferredSize(new java.awt.Dimension(315, 99));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_total_nasabah.png"))); // NOI18N

        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Total nasabah");

        lb_totalNasabah.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lb_totalNasabah.setForeground(new java.awt.Color(255, 255, 255));
        lb_totalNasabah.setText("1.000");

        javax.swing.GroupLayout CardTotalNasabahLayout = new javax.swing.GroupLayout(CardTotalNasabah);
        CardTotalNasabah.setLayout(CardTotalNasabahLayout);
        CardTotalNasabahLayout.setHorizontalGroup(
            CardTotalNasabahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardTotalNasabahLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CardTotalNasabahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(lb_totalNasabah))
                .addGap(0, 0, 0))
        );
        CardTotalNasabahLayout.setVerticalGroup(
            CardTotalNasabahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardTotalNasabahLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(CardTotalNasabahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(CardTotalNasabahLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lb_totalNasabah))
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CardTotalSampah.setFillColor(new java.awt.Color(31, 179, 148));
        CardTotalSampah.setPreferredSize(new java.awt.Dimension(315, 99));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Trash.png"))); // NOI18N

        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("Total berat sampah");

        lb_totalSampah.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lb_totalSampah.setForeground(new java.awt.Color(255, 255, 255));
        lb_totalSampah.setText("1.000");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("KG");

        javax.swing.GroupLayout CardTotalSampahLayout = new javax.swing.GroupLayout(CardTotalSampah);
        CardTotalSampah.setLayout(CardTotalSampahLayout);
        CardTotalSampahLayout.setHorizontalGroup(
            CardTotalSampahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardTotalSampahLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CardTotalSampahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(CardTotalSampahLayout.createSequentialGroup()
                        .addComponent(lb_totalSampah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addGap(0, 0, 0))
        );
        CardTotalSampahLayout.setVerticalGroup(
            CardTotalSampahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardTotalSampahLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(CardTotalSampahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(CardTotalSampahLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(CardTotalSampahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_totalSampah)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CardSaldoTabungan.setFillColor(new java.awt.Color(31, 179, 148));
        CardSaldoTabungan.setPreferredSize(new java.awt.Dimension(315, 99));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_total_tabungan.png"))); // NOI18N

        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText("Laba");

        lb_laba.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lb_laba.setForeground(new java.awt.Color(255, 255, 255));
        lb_laba.setText("Rp 1.000");

        javax.swing.GroupLayout CardSaldoTabunganLayout = new javax.swing.GroupLayout(CardSaldoTabungan);
        CardSaldoTabungan.setLayout(CardSaldoTabunganLayout);
        CardSaldoTabunganLayout.setHorizontalGroup(
            CardSaldoTabunganLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardSaldoTabunganLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CardSaldoTabunganLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(lb_laba))
                .addGap(0, 0, 0))
        );
        CardSaldoTabunganLayout.setVerticalGroup(
            CardSaldoTabunganLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardSaldoTabunganLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(CardSaldoTabunganLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(CardSaldoTabunganLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lb_laba))
                    .addComponent(jLabel11))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelCardLayout = new javax.swing.GroupLayout(panelCard);
        panelCard.setLayout(panelCardLayout);
        panelCardLayout.setHorizontalGroup(
            panelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCardLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(CardTotalNasabah, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addComponent(CardTotalSampah, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addComponent(CardSaldoTabungan, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        panelCardLayout.setVerticalGroup(
            panelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCardLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(panelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CardSaldoTabungan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CardTotalSampah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CardTotalNasabah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbl_log.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbl_log);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel14.setText("Aktivitas terbaru");
        jLabel14.setPreferredSize(new java.awt.Dimension(145, 30));

        panelBawah.setPreferredSize(new java.awt.Dimension(645, 57));

        btn_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icon_excel.png"))); // NOI18N
        btn_add.setText("Export To Excel");
        btn_add.setFillClick(new java.awt.Color(55, 130, 60));
        btn_add.setFillOriginal(new java.awt.Color(76, 175, 80));
        btn_add.setFillOver(new java.awt.Color(69, 160, 75));
        btn_add.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_add.setRoundedCorner(40);
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        lb_halaman.setText("hal");

        btn_firstLog.setText("First Page");
        btn_firstLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_firstLogActionPerformed(evt);
            }
        });

        btn_beforeLog.setText("<");

        cbx_dataLog.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "15", "30", "45", "60" }));
        cbx_dataLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_dataLogActionPerformed(evt);
            }
        });

        btn_nextLog.setText(">");

        btn_lastLog.setText("Last Page");

        javax.swing.GroupLayout panelBawahLayout = new javax.swing.GroupLayout(panelBawah);
        panelBawah.setLayout(panelBawahLayout);
        panelBawahLayout.setHorizontalGroup(
            panelBawahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBawahLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_firstLog, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_beforeLog, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_dataLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_nextLog, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_lastLog, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        panelBawahLayout.setVerticalGroup(
            panelBawahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBawahLayout.createSequentialGroup()
                .addGap(0, 5, Short.MAX_VALUE)
                .addGroup(panelBawahLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_firstLog, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_beforeLog, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_dataLog, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_nextLog, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_lastLog, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelTabelLayout = new javax.swing.GroupLayout(panelTabel);
        panelTabel.setLayout(panelTabelLayout);
        panelTabelLayout.setHorizontalGroup(
            panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTabelLayout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelTabelLayout.createSequentialGroup()
                        .addGroup(panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelBawah, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ChartDistribusiSampah, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(ChartBarangTerjualVsBarangSisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        panelTabelLayout.setVerticalGroup(
            panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabelLayout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(panelTabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTabelLayout.createSequentialGroup()
                        .addComponent(ChartBarangTerjualVsBarangSisa, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ChartDistribusiSampah, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBawah, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCard, javax.swing.GroupLayout.DEFAULT_SIZE, 1152, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(panelCard, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelTabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        try {
        
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"ID", "Admin", "Aktivitas", "Tanggal"}, 0
        );
        getAllData(model); // Ambil data dari DB ke model

        // Cek jika tidak ada data
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada data untuk diekspor!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Pilih lokasi penyimpanan file
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Simpan file Excel");
        chooser.setSelectedFile(new File("log_aktivitas.xls")); // Nama default

        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().toLowerCase().endsWith(".xls") || f.getName().toLowerCase().endsWith(".xlsx");
            }

            @Override
            public String getDescription() {
                return "Excel Files (*.xls, *.xlsx)";
            }
        });

        int option = chooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File fileToSave = chooser.getSelectedFile();

            // Tambahkan ekstensi jika belum ada
            String fileName = fileToSave.getName().toLowerCase();
            if (!fileName.endsWith(".xls") && !fileName.endsWith(".xlsx")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".xls");
            }

            // Konfirmasi jika file sudah ada
            if (fileToSave.exists()) {
                int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "File sudah ada. Apakah Anda ingin menimpanya?",
                    "Konfirmasi",
                    JOptionPane.YES_NO_OPTION
                );
                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            // Lakukan ekspor
            try {
                ExcelExporter.exportTableModelToExcel(model, fileToSave);

                JOptionPane.showMessageDialog(this,
                    "Export berhasil!\nFile disimpan di: " + fileToSave.getAbsolutePath(),
                    "Sukses",
                    JOptionPane.INFORMATION_MESSAGE);
                notification.toast.Notifications.getInstance().show(Notifications.Type.SUCCESS, "Export berhasil");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Gagal mengekspor file: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                notification.toast.Notifications.getInstance().show(Notifications.Type.WARNING, "Gagal mengekspor file");
                e.printStackTrace();
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Terjadi kesalahan: " + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
        notification.toast.Notifications.getInstance().show(Notifications.Type.ERROR, "Terjadi kesalahan");
        e.printStackTrace();
    }
    }//GEN-LAST:event_btn_addActionPerformed

    private void cbx_dataLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_dataLogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_dataLogActionPerformed

    private void btn_firstLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_firstLogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_firstLogActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private component.Card CardSaldoTabungan;
    private component.Card CardTotalNasabah;
    private component.Card CardTotalSampah;
    private chart.PolarAreaChart ChartBarangTerjualVsBarangSisa;
    private chart.PolarAreaChart ChartDistribusiSampah;
    private component.Jbutton btn_add;
    private javax.swing.JButton btn_beforeLog;
    private javax.swing.JButton btn_firstLog;
    private javax.swing.JButton btn_lastLog;
    private javax.swing.JButton btn_nextLog;
    private javax.swing.JComboBox<String> cbx_dataLog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JLabel lb_laba;
    private javax.swing.JLabel lb_totalNasabah;
    private javax.swing.JLabel lb_totalSampah;
    private component.ShadowPanel panelBawah;
    private component.ShadowPanel panelCard;
    private component.ShadowPanel panelTabel;
    private component.Table tbl_log;
    // End of variables declaration//GEN-END:variables
            private void paginationLog() {
        btn_firstLog.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = 1;
                loadLogData();
            }
        });
        btn_beforeLog.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni > 1) {
                    halamanSaatIni--;
                    loadLogData();
                }
            }
        });
        cbx_dataLog.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dataPerHalaman = Integer.parseInt(cbx_dataLog.getSelectedItem().toString());
                halamanSaatIni = 1;
                loadLogData();
            }
        });
        btn_nextLog.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (halamanSaatIni < totalPages) {
                    halamanSaatIni++;
                    loadLogData();
                }

            }
        });
        btn_lastLog.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = totalPages;
                loadLogData();
            }
        });
    }

    private int getTotalData() {
        int totalData = 0;
        try {
            String sql = "Select Count(*) AS total FROM log_aktivitas";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    totalData = rs.getInt("total");
                }
            }

        } catch (Exception e) {
//            Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }
        return totalData;
    }

    private void calculateTotalPage() {
        int totalData = getTotalData();
        totalPages = (int) Math.ceil((double) totalData / dataPerHalaman);
    }

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tbl_log.getModel();
        model.addColumn("ID");
        model.addColumn("Admin");
        model.addColumn("Aktivitas");
        model.addColumn("Tanggal");
    }

    private void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0);

        try {
            String sql = "SELECT log_aktivitas.id_log, login.nama_user, log_aktivitas.aktivitas, log_aktivitas.tanggal \n"
                    + "FROM log_aktivitas \n"
                    + "JOIN login ON log_aktivitas.id_user = login.id_user \n"
                    + "ORDER BY log_aktivitas.id_log DESC LIMIT ?,?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setInt(1, startIndex);
                st.setInt(2, entriesPage);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String idLog = rs.getString("id_log");
                    String admin = rs.getString("nama_user");
                    String aktivitas = rs.getString("aktivitas");
                    String tanggal = rs.getString("tanggal");

                    Object[] rowData = {idLog, admin, aktivitas, tanggal};
                    model.addRow(rowData);

                }
            }
        } catch (SQLException e) {
//            Logger.getLogger(TabManajemenNasabah.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void loadLogData() {
        calculateTotalPage();
        int totalData = getTotalData();
        lb_halaman.setText(String.valueOf("Page " + halamanSaatIni + " Dari Total " + totalData + " Data"));
        int startIndex = (halamanSaatIni - 1) * dataPerHalaman;
        getData(startIndex, dataPerHalaman, (DefaultTableModel) tbl_log.getModel());
    }

    public void loadDashboardData() {
        try {
            Connection conn = DBconnect.getConnection();
            Statement stmt = conn.createStatement();

            // Total Nasabah
            ResultSet rsNasabah = stmt.executeQuery("SELECT COUNT(*) FROM manajemen_nasabah");
            if (rsNasabah.next()) {
                int totalNasabah = rsNasabah.getInt(1);
                lb_totalNasabah.setText(String.valueOf(totalNasabah));
            }

            // Total Sampah
            ResultSet rsSampah = stmt.executeQuery("SELECT SUM(berat_sampah) FROM setor_sampah");
            if (rsSampah.next()) {
                double totalSampah = rsSampah.getDouble(1);
                lb_totalSampah.setText(String.valueOf(totalSampah));
            }

// Total Pemasukan
            ResultSet rsPemasukan = stmt.executeQuery(
                    "SELECT SUM(db.harga) AS total_pemasukan "
                    + "FROM laporan_pemasukan lp "
                    + "JOIN data_barang db ON lp.id_barang = db.id_barang"
            );
            double pemasukan = rsPemasukan.next() ? rsPemasukan.getDouble("total_pemasukan") : 0;

// Total Pengeluaran
            ResultSet rsPengeluaran = stmt.executeQuery(
                    "SELECT SUM(s.harga) AS total_pengeluaran "
                    + "FROM laporan_pengeluaran lp "
                    + "JOIN setor_sampah s ON lp.id_setoran = s.id_setoran"
            );
            double pengeluaran = rsPengeluaran.next() ? rsPengeluaran.getDouble("total_pengeluaran") : 0;

            double saldo = pemasukan - pengeluaran;
            lb_laba.setText("Rp " + String.format("%,.0f", saldo));

            lb_laba.setText("Rp " + String.format("%,.0f", saldo));

            conn.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data dashboard: " + e.getMessage());
        }
    }

    private void insertLog(int idUser, String aktivitas) {
        try {
            String sql = "INSERT INTO log_aktivitas (id_user, aktivitas) VALUES (?, ?)";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setInt(1, idUser);
                st.setString(2, aktivitas);
                st.executeUpdate();
            }
        } catch (SQLException e) {
            Logger.getLogger(TabDashboard.class.getName()).log(Level.SEVERE, null, e);
        }
    }

//    public void exportToExcel(JTable table, String filePath) {
//        try {
//            TableModel model = table.getModel();
//            XSSFWorkbook workbook = new XSSFWorkbook();
//            XSSFsheet sheet = workbook.createSheet("Data");
//            
//            Row headerRow = sheet.createRow(0);
//            for (int i = 0; i < model.getColumnCount(); i++) {
//            Cell cell = headerRow.createCell(i);
//            cell.setCellValue(model.getColumnName(i));
//            }
//            
//            for (int i = 0; i < model.getRowCount(); i++) {
//            Row row = sheet.createRow(i + 1);
//            for (int j = 0; j < model.getColumnCount(); j++) {
//                Cell cell = row.createCell(j);
//                cell.setCellValue(model.getValueAt(i,j).toString());
//            }
//            }
//            
//            FileOutputStream fileOut = new FileOutputStream(new File(filePath));
//            workbook.write(fileOut);
//            fileOut.close();
//            JOptionPane.showMessageDialog(null, "data Berhasil diekspor ke file Excel");
//        } catch (IOException e) {
//        JOptionPane.showMessageDialog(null, "terjadi kesalaah saat ekspor data");
//        }
//    }
    private void getAllData(DefaultTableModel model) {
        model.setRowCount(0);

        try {
            String sql = "SELECT log_aktivitas.id_log, login.nama_user, log_aktivitas.aktivitas, log_aktivitas.tanggal \n"
                    + "FROM log_aktivitas \n"
                    + "JOIN login ON log_aktivitas.id_user = login.id_user \n"
                    + "ORDER BY log_aktivitas.id_log DESC";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String idLog = rs.getString("id_log");
                    String admin = rs.getString("nama_user");
                    String aktivitas = rs.getString("aktivitas");
                    String tanggal = rs.getString("tanggal");

                    Object[] rowData = {idLog, admin, aktivitas, tanggal};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal ambil semua data:\n" + e.getMessage());
        }
    }

    private void loadDataChartJenisSampah() {
        String query = """
        SELECT js.nama_jenis, COUNT(ks.id_kategori) as jumlah_kategori
        FROM jenis_sampah js 
        LEFT JOIN kategori_sampah ks ON js.id_jenis = ks.id_jenis 
        GROUP BY js.id_jenis, js.nama_jenis
        ORDER BY js.id_jenis
        """;

        try {
            Connection conn = DBconnect.getConnection();
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            // Clear chart sebelum menambah data baru
            ChartDistribusiSampah.clear();

            // Array warna yang sesuai dengan tema
            Color[] colors = {
                new Color(72, 202, 164), // Hijau mint untuk Organik
                new Color(96, 125, 117), // Hijau gelap untuk Anorganik  
                new Color(239, 68, 68), // Merah untuk B3
                new Color(59, 130, 246) // Biru untuk Daur Ulang
            };

            int colorIndex = 0;

            while (rs.next()) {
                String namaJenis = rs.getString("nama_jenis");
                int jumlahKategori = rs.getInt("jumlah_kategori");

                // Gunakan warna sesuai urutan, jika lebih dari 4 jenis akan mengulang
                Color warna = colors[colorIndex % colors.length];

                ChartDistribusiSampah.addItem(new ModelPolarAreaChart(
                        warna,
                        namaJenis,
                        jumlahKategori
                ));

                colorIndex++;
            }

            // Start chart setelah semua data ditambahkan
            ChartDistribusiSampah.start();

            // Tutup koneksi
            rs.close();
            ps.close();
            conn.close();

        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Error loading chart jenis sampah: " + e.getMessage());
        }
    }

    private void loadDataChartBarang() {
        int totalStok = 0;
        int totalTerjual = 0;

        String queryStok = "SELECT SUM(stok) AS total_stok FROM data_barang";
        String queryTerjual = "SELECT SUM(qty) AS total_terjual FROM transaksi";

        try {
            Connection conn = DBconnect.getConnection();
            PreparedStatement psStok = conn.prepareStatement(queryStok);
            ResultSet rsStok = psStok.executeQuery();
            if (rsStok.next()) {
                totalStok = rsStok.getInt("total_stok");
            }

            PreparedStatement psTerjual = conn.prepareStatement(queryTerjual);
            ResultSet rsTerjual = psTerjual.executeQuery();
            if (rsTerjual.next()) {
                totalTerjual = rsTerjual.getInt("total_terjual");
            }

            ChartBarangTerjualVsBarangSisa.clear();
            ChartBarangTerjualVsBarangSisa.addItem(new ModelPolarAreaChart(new Color(72, 202, 164), "Barang Terjual", totalTerjual));
            ChartBarangTerjualVsBarangSisa.addItem(new ModelPolarAreaChart(new Color(96, 125, 117), "Barang Tersisa", totalStok));

            ChartBarangTerjualVsBarangSisa.start();

            rsStok.close();
            rsTerjual.close();
            psStok.close();
            psTerjual.close();
            conn.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
